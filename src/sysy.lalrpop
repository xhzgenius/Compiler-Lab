// lalrpop 里的约定
use crate::ast_def::*;
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 块注释也要跳过——XHZ
  r"\/\*([^*]|(\*+([^*/])))*\*+\/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit {func_def};

// 同上, 不解释
FuncDef: FuncDef = {
  <return_type: Type> <func_id: Id> "(" ")" <block: Block> => {
    FuncDef{return_type: return_type, func_id: func_id, block: block}
  }
}

Type: Type = {
  "int" => Type{type_name: "int".to_string()}
}

Block: Block = "{" <stmt: Stmt> "}" => Block::Stmt(stmt);

Stmt: Stmt =  {
  "return" <exp: Exp> ";" => Stmt::ReturnStmt(exp), 
}

Exp: Exp = {
  <lor_exp: LOrExp> => Exp::LOrExp(lor_exp), 
}

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp(land_exp), 
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::BinaryLOrExp(Box::new(lor_exp), land_exp), 
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(eq_exp), 
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::BinaryLAndExp(Box::new(land_exp), eq_exp), 
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(rel_exp), 
  <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::BinaryEqExp(Box::new(eq_exp), rel_exp), 
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::BinaryUneqExp(Box::new(eq_exp), rel_exp), 
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(add_exp), 
  <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::BinaryLtExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::BinaryGtExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::BinaryLeExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::BinaryGeExp(Box::new(rel_exp), add_exp), 
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(mul_exp), 
  <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::BinaryAddExp(Box::new(add_exp), mul_exp), 
  <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::BinarySubExp(Box::new(add_exp), mul_exp), 
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(unary_exp), 
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::BinaryMulExp(Box::new(mul_exp), unary_exp), 
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::BinaryDivExp(Box::new(mul_exp), unary_exp), 
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::BinaryModExp(Box::new(mul_exp), unary_exp), 
}

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(primary_exp), 
  "+" <unary_exp: UnaryExp> => UnaryExp::PlusUnaryExp(Box::new(unary_exp)), 
  "-" <unary_exp: UnaryExp> => UnaryExp::MinusUnaryExp(Box::new(unary_exp)), 
  "!" <unary_exp: UnaryExp> => UnaryExp::NotUnaryExp(Box::new(unary_exp)), 
}

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::BracedExp(Box::new(exp)), 
  <number: Number> => PrimaryExp::Number(number), 
}

Number: Number = {
  <int_const: IntConst> => Number::IntConst(int_const), 
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Id: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}