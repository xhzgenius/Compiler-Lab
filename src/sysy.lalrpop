// lalrpop 里的约定
use crate::ast_def::{*, declarations::*, statements::*, expressions::*, symbols::*};
use koopa::ir::types::TypeKind;
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 块注释也要跳过——XHZ
  r"\/\*([^*]|(\*+([^*/])))*\*+\/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit {func_def};

// ======================================================
// Declarations
// ======================================================

// 同上, 不解释
FuncDef: FuncDef = {
  <return_type: FuncType> <func_id: IDENT> "(" ")" <block: Block> => {
    FuncDef::Default(return_type, func_id, block)
  }
}

Block: Block = "{" <block_items: (BlockItem)*> "}" => Block::Default(block_items); // Referenced from kira-rs. 

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(decl), 
  <stmt: Stmt> => BlockItem::Stmt(stmt), 
}

Decl: Decl = {
  <c: ConstDecl> => Decl::ConstDecl(c), 
  <v: VarDecl> => Decl::VarDecl(v), 
}

ConstDecl: ConstDecl = "const" <b: BType> <c: ConstDef> <cs: ("," <ConstDef>)*> ";" => {
  let mut vec = Vec::<ConstDef>::new();
  vec.push(c);
  for cc in cs {
    vec.push(cc);
  }
  ConstDecl::Default(b, vec)
};

ConstDef: ConstDef = <i: IDENT> "=" <c: ConstInitVal> => ConstDef::Default(i, c);

ConstInitVal: ConstInitVal = <c: ConstExp> => ConstInitVal::ConstExp(c);

ConstExp: ConstExp = <e: Exp> => ConstExp::Exp(e);

VarDecl: VarDecl = <b: BType> <v: VarDef> <vs: ("," <VarDef>)*> ";" => {
  let mut vec = Vec::<VarDef>::new();
  vec.push(v);
  for vv in vs {
    vec.push(vv);
  }
  VarDecl::Default(b, vec)
};

VarDef: VarDef = {
  <i: IDENT> <val: ("=" <InitVal>)?> => VarDef::Default(i, val), 
}

InitVal: InitVal = <e: Exp> => InitVal::Exp(e);

// ======================================================
// Statements
// ======================================================

Stmt: Stmt = {
  <us: UnmatchedStmt> => Stmt::UnmatchedStmt(us), 
  <ms: MatchedStmt> => Stmt::MatchedStmt(ms), 
}

UnmatchedStmt: UnmatchedStmt = {
  "if" "(" <e: Exp> ")" <ms: MatchedStmt>
    => UnmatchedStmt{default: BasicStmt::IfStmt(e, Box::new(ms.default), Box::new(None))}, 
  "if" "(" <e: Exp> ")" <ums: UnmatchedStmt>
    => UnmatchedStmt{default: BasicStmt::IfStmt(e, Box::new(ums.default), Box::new(None))}, 
  "if" "(" <e: Exp> ")" <ms: MatchedStmt> "else" <ums: UnmatchedStmt> 
    => UnmatchedStmt{default: BasicStmt::IfStmt(e, Box::new(ms.default), Box::new(Some(ums.default)))}, 
  "while" "(" <e: Exp> ")" <ums: UnmatchedStmt> 
    => UnmatchedStmt{default: BasicStmt::WhileStmt(e, Box::new(ums.default))}, 
}

MatchedStmt: MatchedStmt =  {
  <l: LVal> "=" <e: Exp> ";" => MatchedStmt{default: BasicStmt::AssignStmt(l, e)}, 
  <e: (Exp)?> ";" => MatchedStmt{default: BasicStmt::Exp(e)}, 
  <b: Block> => MatchedStmt{default: BasicStmt::Block(b)}, 
  "if" "(" <e: Exp> ")" <s1: MatchedStmt> "else" <s2: MatchedStmt> 
    => MatchedStmt{default: BasicStmt::IfStmt(e, Box::new(s1.default), Box::new(Some(s2.default)))}, 
  "while" "(" <e: Exp> ")" <ms: MatchedStmt> 
    => MatchedStmt{default: BasicStmt::WhileStmt(e, Box::new(ms.default))}, 
  "break" ";" => MatchedStmt{default: BasicStmt::BreakStmt}, 
  "continue" ";" => MatchedStmt{default: BasicStmt::ContinueStmt}, 
  "return" <e: (Exp)?> ";" => MatchedStmt{default: BasicStmt::ReturnStmt(e)}, 
}

// ======================================================
// Expressions
// ======================================================

Exp: Exp = {
  <lor_exp: LOrExp> => Exp::LOrExp(lor_exp), 
}

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp(land_exp), 
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::BinaryLOrExp(Box::new(lor_exp), land_exp), 
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(eq_exp), 
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::BinaryLAndExp(Box::new(land_exp), eq_exp), 
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(rel_exp), 
  <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::BinaryEqExp(Box::new(eq_exp), rel_exp), 
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::BinaryUneqExp(Box::new(eq_exp), rel_exp), 
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(add_exp), 
  <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::BinaryLtExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::BinaryGtExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::BinaryLeExp(Box::new(rel_exp), add_exp), 
  <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::BinaryGeExp(Box::new(rel_exp), add_exp), 
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(mul_exp), 
  <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::BinaryAddExp(Box::new(add_exp), mul_exp), 
  <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::BinarySubExp(Box::new(add_exp), mul_exp), 
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(unary_exp), 
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::BinaryMulExp(Box::new(mul_exp), unary_exp), 
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::BinaryDivExp(Box::new(mul_exp), unary_exp), 
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::BinaryModExp(Box::new(mul_exp), unary_exp), 
}

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(primary_exp), 
  "+" <unary_exp: UnaryExp> => UnaryExp::PlusUnaryExp(Box::new(unary_exp)), 
  "-" <unary_exp: UnaryExp> => UnaryExp::MinusUnaryExp(Box::new(unary_exp)), 
  "!" <unary_exp: UnaryExp> => UnaryExp::NotUnaryExp(Box::new(unary_exp)), 
}

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::BracedExp(Box::new(exp)), 
  <lval: LVal> => PrimaryExp::LVal(lval), 
  <number: Number> => PrimaryExp::Number(number), 
}

LVal: LVal = {
  <i: IDENT> => LVal::IDENT(i), 
}

Number: Number = {
  <int_const: INTCONST> => Number::INTCONST(int_const), 
}

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
INTCONST: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

//! ======================================================
//! Symbols
//! ======================================================
// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
IDENT: IDENT = r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT{content: <>.to_string()};

FuncType: FuncType = {
  "int" => FuncType{content: TypeKind::Int32}
}

BType: BType = {
  "int" => BType{content: TypeKind::Int32}
}